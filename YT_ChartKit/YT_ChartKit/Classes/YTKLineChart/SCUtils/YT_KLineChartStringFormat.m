//
//  YT_KLineChartStringFormat.m
//  KDS_Phone
//
//  Created by yt_liyanshan on 2018/6/8.
//  Copyright ¬© 2018Âπ¥ kds. All rights reserved.
//

#import "YT_KLineChartStringFormat.h"

#ifndef YTSCSTRWAN
#define YTSCSTRWAN @"‰∏á"
#endif

#ifndef YTSCSTRYI
#define YTSCSTRYI @"‰∫ø"
#endif

NS_ASSUME_NONNULL_BEGIN
/**
 ÂéÜÂè≤ÈóÆÈ¢ò ËØ¶Ëß£
 
 ########### ###########  ###########  ###########  ###########  ###########  ###########
 bIsGGQQ;        //ÊòØÂê¶‰∏∫‰∏™ËÇ°ÊúüÊùÉ
 
 if (self.bIsGGQQ) {
     [NSString stringWithFormat:@"%.4f",(fZdcj->fValue)/10.0];
 } else {
     [NSString stringWithFormat:@"%.2f",fZdcj->fValue];
 }
 ‰∏∫‰ªÄ‰πàË¶ÅÈô§ 10 Âõ†‰∏∫ ‰∏™ËÇ°ÊúüÊùÉ ‰∏ãÂèëÁöÑ Êï∞ÊçÆ Ë¶ÅÊØî ÁúüÊ≠£ÁöÑÊï∞ÊçÆ Â§ß 10 ÂÄç
 Âõ†‰∏∫ KFloat Âè™Êúâ 2bit Ë°®Á§∫Â∞èÊï∞‰Ωç Âè™ÊúâÊúÄÂ§öË°®Á§∫ ‰∏â‰Ωç  bIsGGQQ ÈúÄË¶Å‰øùÁïô 4‰ΩçÂ∞èÊï∞ ÁªìÊûú üò§ ÊúçÂä°Âô®‰∏ãÂèë Â∞±ÊääÁúüÂÆûÊï∞ÊçÆ * 10 ÂÜç * 1000 Êää
 nDigit ËÆæ‰∏∫ 3 Ôºàb11Ôºâ ‰º†ËøáÊù•‰∫Ü [self adjustFloat] ËΩ¨ float ÊòØ Âè™Áúã nDigit ‰∏∫ 3 ,self->fValue Â∞±Èô§‰∫é 1000,ËøôÂ∞±ÂØºËá¥Êï∞ÊçÆÂ§ß‰∫Ü10ÂÄç üò§üò§üò§üò§üò§üò§üò§
 
 - (id)init:(int)value {
     self = [super init];
     if (nil != self) {
         self->nUnit = (value & 0x00000003);
         self->nDigit = ((value & 0x0000000c) >> 2);
         self->fValue = (value >> 4);
         [self adjustFloat];
     }
     return self;
 }
 ########### ###########  ###########  ###########  ###########  ###########  ###########
 

 */
@implementation YT_KLineChartStringFormat

/**
 float ËΩ¨ Â≠óÁ¨¶‰∏≤

 @param v ÂÄº
 @param unit Âçï‰Ωç
 @param digit numberOfDecimalPlaces Â∞èÊï∞‰ΩçÊï∞
 @return Â≠óÁ¨¶‰∏≤
 */
+ (NSString *)floatToString:(double)v unit:(int)unit digit:(int)digit {
    
    NSString *format = [NSString stringWithFormat:@"%%.%dlf", digit];
    NSString *str = [NSString stringWithFormat:format, v];
    switch (unit) {
        case YTSC_TEN_THOUSAND:
            str = [str stringByAppendingString:[self unitWan]];
            break;
        case YTSC_HUNDRED_MILLION:
            str = [str stringByAppendingString:[self unitYi]];
            break;

        case YTSC_NUMBER:
        default:
            break;
    }
    return str;
}

/**
 ÊµÆÁÇπÂûãËΩ¨string ‰æãÂ≠ê‰∏Ä‰∏™
 */
+ (NSString *)floatToStringAutoUnit:(double)v adjuetDigit:(int)digit max:(double)max min:(double)min{
    int unitTa = YTSC_NUMBER;
    double vTa = [self adjustFloatWithUnit:v unit:&unitTa];
    int digitTa = [self adjustDigit:digit span:max - min limitDigit:3];
    
    if (vTa < 1) {
        int minDigitTa = [self digitForWorkSpace:1 afloat:vTa limitMaxDigit:4];
        digitTa = minDigitTa > digitTa ? minDigitTa : digitTa;
    }
    return [self floatToString:vTa unit:unitTa digit:digitTa];
}

//+(void)load {
//    NSString * digit = [self floatToStringAutoUnit:0.001 adjuetDigit:2 max:0.2 min:0.0001];
//    NSLog(@"digit %@",digit); //ËæìÂá∫ digit 0.001
//
//    NSString * digit2 = [self floatToStringAutoUnit:100000.213 adjuetDigit:2 max:100000.213 min:100000.2];
//    NSLog(@"digit %@",digit2); //ËæìÂá∫ digit 100.0000‰∏á
//}

/**
 ‰∏Ä‰∏™ afloat Âú®Á°ÆÂÆö ÊúâÊïà‰ΩçÊï∞ ÁöÑÊÉÖÂÜµ‰∏ãÊ±Ç ÊúâÊïàÁöÑÊï¥Êï∞‰Ωç Âíå ÊúâÊïàÁöÑÂ∞èÊï∞‰Ωç
 ÂΩì Êï¥Êï∞‰Ωç >0 ,Â∞èÊï∞‰Ωç = ÊúâÊïà‰ΩçÊï∞ - ÊúâÊïàÁöÑÊï¥Êï∞‰Ωç „ÄÇÂê¶Âàô Â∞èÊï∞‰Ωç = ÊúâÊïà‰ΩçÊï∞ + 0. ÂêéÁ¥ßË∑üÁùÄÁöÑ0ÁöÑ‰∏™Êï∞
 @param workSpace ÊúâÊïà‰ΩçÊï∞
 @param afloat ÂÄº
 @param units ÊúâÊïàÁöÑÊï¥Êï∞‰Ωç
 @param digit ÊúâÊïàÁöÑÂ∞èÊï∞‰Ωç
 */
+ (void)workSpace:(int)workSpace afloat:(double)afloat units:(nullable int *)units digit:(int *)digit {
    
    int work = 0; // ÊúâÊïàÁöÑÊï¥Êï∞‰Ωç / ÊúâÊïàÁöÑÂ∞èÊï∞‰Ωç
    int taInt = (int)afloat;
    float taFlaot  = afloat - taInt;
    
    while (taInt > 0 && work < workSpace) {
        taInt /= 10;
        work ++;  //ÂèñÂæóÊï¥Êï∞ÈÉ®ÂàÜÊúâÊïàÊï∞
    }
    if (work > 0) {
        if (units != NULL) *units = work;
        *digit = (workSpace - work);
        return;
    }
    
    do {
        taFlaot *= 10;
        work ++;
    } while (taFlaot < 1 && work < 37);//float ÊúÄÂ§ß‰ΩçÊï∞
    work --; //0. ÂêéÁ¥ßË∑üÁùÄÁöÑ0ÁöÑ‰∏™Êï∞
    work += workSpace;
    
    if (units != NULL) *units = 0;
    *digit = work;
}

+ (int)digitForWorkSpace:(int)workSpace afloat:(double)afloat limitMaxDigit:(int)maxDigit {

    int units_work = 0; // ÊúâÊïàÁöÑÊï¥Êï∞‰Ωç
    int digit_work = 0; // ÊúâÊïàÁöÑÂ∞èÊï∞‰Ωç
    
    int taInt = (int)afloat;
    float taFlaot  = afloat - taInt;
    
    while (taInt > 0 && units_work < workSpace) {
        taInt /= 10;
        units_work ++;  //ÂèñÂæóÊï¥Êï∞ÈÉ®ÂàÜÊúâÊïàÊï∞
    }
    
    if (units_work > 0) {
        digit_work = workSpace - units_work;
        if (digit_work > maxDigit) {
            return maxDigit;
        }
        return digit_work;
    }
    
    do {
        taFlaot *= 10;
        digit_work ++;
    } while (taFlaot < 1 && digit_work <= maxDigit);
    digit_work --; //0. ÂêéÁ¥ßË∑üÁùÄÁöÑ0ÁöÑ‰∏™Êï∞
    digit_work += workSpace;
    
    digit_work = workSpace - units_work;
    if (digit_work > maxDigit) {
        return maxDigit;
    }
    return digit_work;
}


/**
 Ê†πÊçÆÊúÄÂ§ßÊúÄÂ∞èË∞ÉÊï¥Â∞èÊï∞‰Ωç
 
 @param digit ÈªòËÆ§Â∞èÊï∞‰Ωç
 @param span ÊúÄÂ§ßÂÄº - ÊúÄÂ∞èÂÄº Ë∑®Â∫¶
 @param limitDigit ÊúÄÂ§ßÂÄº - 1
 @return ÂêàÈÄÇÁöÑÂ∞èÊï∞‰Ωç
 */
+ (int)adjustDigit:(int)digit span:(double)span limitDigit:(int)limitDigit{
    if (digit > limitDigit) return digit; // ÊúÄÂ§ßÂ∞èÊï∞‰Ωç
    float kuduStd = powf(0.1, digit) * 100;
    if ( span < kuduStd) {
        return [self adjustDigit:++digit span:span limitDigit:limitDigit];
    }
    return digit;
}

+ (int)adjustDigitThis:(double)v digit:(int)digit span:(double)span maxDigit:(int)maxDigit{

    if(digit >= maxDigit) return digit;
    
    int digitTa = [self adjustDigit:digit span:span limitDigit:maxDigit -1];
    if (v >= 1) return digitTa;
    int minDigitTa = [self digitForWorkSpace:1 afloat:v limitMaxDigit:maxDigit];
    digitTa = minDigitTa > digitTa ? minDigitTa : digitTa;
    return digitTa;
}

//ÂèñÂçï‰Ωç
+ (int)stringFormatGetUnits:(double)v {
    if (v > 100000000)
        return YTSC_HUNDRED_MILLION;
    else if  (v > 10000)
        return YTSC_TEN_THOUSAND;
    else
        return YTSC_NUMBER;
}

+ (double)adjustFloatWithUnit:(double)v unit:(int *)unit {
    if (v > 100000000){
        * unit = YTSC_HUNDRED_MILLION;
        return  v / 100000000 ;
    }else if  (v > 10000){
         * unit = YTSC_TEN_THOUSAND;
        return v / 10000 ;
    }else{
        * unit = YTSC_NUMBER;
        return v ;
    }
}

+ (double)adjustFloatWithUnit:(double)v {
    if (v > 100000000)
        return  v / 100000000;
    else if  (v > 10000)
        return v / 10000;
    else
        return v;
}


+ (NSString *)unitWan {
    return YTSCSTRWAN;
}

+ (NSString *)unitYi {
    return YTSCSTRYI;
}


@end

NS_ASSUME_NONNULL_END
